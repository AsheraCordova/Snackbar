//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJSnackbar\src\main\java\com\google\android\material\snackbar\SnackbarManager.java
//

#include "BaseTransientBottomBar.h"
#include "Handler.h"
#include "J2ObjC_source.h"
#include "Looper.h"
#include "Message.h"
#include "Snackbar.h"
#include "SnackbarManager.h"
#include "java/lang/ref/WeakReference.h"

@class ADXSnackbarManager_SnackbarRecord;
@class JavaLangRefWeakReference;


@interface ADXSnackbarManager () {
 @public
  id lock_;
  ADHandler *handler_;
  ADXSnackbarManager_SnackbarRecord *currentSnackbar_;
  ADXSnackbarManager_SnackbarRecord *nextSnackbar_;
}

- (instancetype)initPackagePrivate;

- (void)showNextSnackbarLocked;

- (jboolean)cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *)record
                                                              withInt:(jint)event;

- (jboolean)isCurrentSnackbarLockedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback;

- (jboolean)isNextSnackbarLockedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback;

- (void)scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *)r;

@end

J2OBJC_FIELD_SETTER(ADXSnackbarManager, lock_, id)
J2OBJC_FIELD_SETTER(ADXSnackbarManager, handler_, ADHandler *)
J2OBJC_FIELD_SETTER(ADXSnackbarManager, currentSnackbar_, ADXSnackbarManager_SnackbarRecord *)
J2OBJC_FIELD_SETTER(ADXSnackbarManager, nextSnackbar_, ADXSnackbarManager_SnackbarRecord *)

inline jint ADXSnackbarManager_get_SHORT_DURATION_MS(void);
#define ADXSnackbarManager_SHORT_DURATION_MS 1500
J2OBJC_STATIC_FIELD_CONSTANT(ADXSnackbarManager, SHORT_DURATION_MS, jint)

inline jint ADXSnackbarManager_get_LONG_DURATION_MS(void);
#define ADXSnackbarManager_LONG_DURATION_MS 2750
J2OBJC_STATIC_FIELD_CONSTANT(ADXSnackbarManager, LONG_DURATION_MS, jint)

inline ADXSnackbarManager *ADXSnackbarManager_get_snackbarManager(void);
inline ADXSnackbarManager *ADXSnackbarManager_set_snackbarManager(ADXSnackbarManager *value);
static ADXSnackbarManager *ADXSnackbarManager_snackbarManager;
J2OBJC_STATIC_FIELD_OBJ(ADXSnackbarManager, snackbarManager, ADXSnackbarManager *)

__attribute__((unused)) static void ADXSnackbarManager_initPackagePrivate(ADXSnackbarManager *self);

__attribute__((unused)) static ADXSnackbarManager *new_ADXSnackbarManager_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSnackbarManager *create_ADXSnackbarManager_initPackagePrivate(void);

__attribute__((unused)) static void ADXSnackbarManager_showNextSnackbarLocked(ADXSnackbarManager *self);

__attribute__((unused)) static jboolean ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(ADXSnackbarManager *self, ADXSnackbarManager_SnackbarRecord *record, jint event);

__attribute__((unused)) static jboolean ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(ADXSnackbarManager *self, id<ADXSnackbarManager_Callback> callback);

__attribute__((unused)) static jboolean ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(ADXSnackbarManager *self, id<ADXSnackbarManager_Callback> callback);

__attribute__((unused)) static void ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(ADXSnackbarManager *self, ADXSnackbarManager_SnackbarRecord *r);

@interface ADXSnackbarManager_1 : NSObject < ADHandler_Callback > {
 @public
  ADXSnackbarManager *this$0_;
}

- (instancetype)initWithADXSnackbarManager:(ADXSnackbarManager *)outer$;

- (jboolean)handleMessageWithADMessage:(ADMessage *)message;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSnackbarManager_1)

__attribute__((unused)) static void ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager_1 *self, ADXSnackbarManager *outer$);

__attribute__((unused)) static ADXSnackbarManager_1 *new_ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSnackbarManager_1 *create_ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager *outer$);

@interface ADXSnackbarManager_Callback : NSObject

@end

@interface ADXSnackbarManager_SnackbarRecord : NSObject {
 @public
  JavaLangRefWeakReference *callback_;
  jint duration_;
  jboolean paused_;
}

- (instancetype)initWithInt:(jint)duration
withADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback;

- (jboolean)isSnackbarWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSnackbarManager_SnackbarRecord)

J2OBJC_FIELD_SETTER(ADXSnackbarManager_SnackbarRecord, callback_, JavaLangRefWeakReference *)

__attribute__((unused)) static void ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(ADXSnackbarManager_SnackbarRecord *self, jint duration, id<ADXSnackbarManager_Callback> callback);

__attribute__((unused)) static ADXSnackbarManager_SnackbarRecord *new_ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(jint duration, id<ADXSnackbarManager_Callback> callback) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSnackbarManager_SnackbarRecord *create_ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(jint duration, id<ADXSnackbarManager_Callback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ADXSnackbarManager_SnackbarRecord)

@implementation ADXSnackbarManager

+ (ADXSnackbarManager *)getInstance {
  return ADXSnackbarManager_getInstance();
}

- (instancetype)initPackagePrivate {
  ADXSnackbarManager_initPackagePrivate(self);
  return self;
}

- (void)showWithInt:(jint)duration
withADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      ((ADXSnackbarManager_SnackbarRecord *) nil_chk(currentSnackbar_))->duration_ = duration;
      [((ADHandler *) nil_chk(handler_)) removeCallbacksAndMessagesWithId:currentSnackbar_];
      ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(self, currentSnackbar_);
      return;
    }
    else if (ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      ((ADXSnackbarManager_SnackbarRecord *) nil_chk(nextSnackbar_))->duration_ = duration;
    }
    else {
      JreStrongAssignAndConsume(&nextSnackbar_, new_ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(duration, callback));
    }
    if (currentSnackbar_ != nil && ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(self, currentSnackbar_, ADXSnackbar_Callback_DISMISS_EVENT_CONSECUTIVE)) {
      return;
    }
    else {
      JreStrongAssign(&currentSnackbar_, nil);
      ADXSnackbarManager_showNextSnackbarLocked(self);
    }
  }
}

- (void)dismissWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback
                                       withInt:(jint)event {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(self, currentSnackbar_, event);
    }
    else if (ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(self, nextSnackbar_, event);
    }
  }
}

- (void)onDismissedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      JreStrongAssign(&currentSnackbar_, nil);
      if (nextSnackbar_ != nil) {
        ADXSnackbarManager_showNextSnackbarLocked(self);
      }
    }
  }
}

- (void)onShownWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback)) {
      ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(self, currentSnackbar_);
    }
  }
}

- (void)pauseTimeoutWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback) && !((ADXSnackbarManager_SnackbarRecord *) nil_chk(currentSnackbar_))->paused_) {
      ((ADXSnackbarManager_SnackbarRecord *) nil_chk(currentSnackbar_))->paused_ = true;
      [((ADHandler *) nil_chk(handler_)) removeCallbacksAndMessagesWithId:currentSnackbar_];
    }
  }
}

- (void)restoreTimeoutIfPausedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    if (ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback) && ((ADXSnackbarManager_SnackbarRecord *) nil_chk(currentSnackbar_))->paused_) {
      ((ADXSnackbarManager_SnackbarRecord *) nil_chk(currentSnackbar_))->paused_ = false;
      ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(self, currentSnackbar_);
    }
  }
}

- (jboolean)isCurrentWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    return ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback);
  }
}

- (jboolean)isCurrentOrNextWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  @synchronized(lock_) {
    return ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback) || ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(self, callback);
  }
}

- (void)showNextSnackbarLocked {
  ADXSnackbarManager_showNextSnackbarLocked(self);
}

- (jboolean)cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *)record
                                                              withInt:(jint)event {
  return ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(self, record, event);
}

- (jboolean)isCurrentSnackbarLockedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  return ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(self, callback);
}

- (jboolean)isNextSnackbarLockedWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  return ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(self, callback);
}

- (void)scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *)r {
  ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(self, r);
}

- (void)handleTimeoutWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *)record {
  @synchronized(lock_) {
    if (currentSnackbar_ == record || nextSnackbar_ == record) {
      ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(self, record, ADXSnackbar_Callback_DISMISS_EVENT_TIMEOUT);
    }
  }
}

- (void)dealloc {
  RELEASE_(lock_);
  RELEASE_(handler_);
  RELEASE_(currentSnackbar_);
  RELEASE_(nextSnackbar_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXSnackbarManager;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(initPackagePrivate);
  methods[2].selector = @selector(showWithInt:withADXSnackbarManager_Callback:);
  methods[3].selector = @selector(dismissWithADXSnackbarManager_Callback:withInt:);
  methods[4].selector = @selector(onDismissedWithADXSnackbarManager_Callback:);
  methods[5].selector = @selector(onShownWithADXSnackbarManager_Callback:);
  methods[6].selector = @selector(pauseTimeoutWithADXSnackbarManager_Callback:);
  methods[7].selector = @selector(restoreTimeoutIfPausedWithADXSnackbarManager_Callback:);
  methods[8].selector = @selector(isCurrentWithADXSnackbarManager_Callback:);
  methods[9].selector = @selector(isCurrentOrNextWithADXSnackbarManager_Callback:);
  methods[10].selector = @selector(showNextSnackbarLocked);
  methods[11].selector = @selector(cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord:withInt:);
  methods[12].selector = @selector(isCurrentSnackbarLockedWithADXSnackbarManager_Callback:);
  methods[13].selector = @selector(isNextSnackbarLockedWithADXSnackbarManager_Callback:);
  methods[14].selector = @selector(scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord:);
  methods[15].selector = @selector(handleTimeoutWithADXSnackbarManager_SnackbarRecord:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MSG_TIMEOUT", "I", .constantValue.asInt = ADXSnackbarManager_MSG_TIMEOUT, 0x18, -1, -1, -1, -1 },
    { "SHORT_DURATION_MS", "I", .constantValue.asInt = ADXSnackbarManager_SHORT_DURATION_MS, 0x1a, -1, -1, -1, -1 },
    { "LONG_DURATION_MS", "I", .constantValue.asInt = ADXSnackbarManager_LONG_DURATION_MS, 0x1a, -1, -1, -1, -1 },
    { "snackbarManager", "LADXSnackbarManager;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handler_", "LADHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentSnackbar_", "LADXSnackbarManager_SnackbarRecord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSnackbar_", "LADXSnackbarManager_SnackbarRecord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "show", "ILADXSnackbarManager_Callback;", "dismiss", "LADXSnackbarManager_Callback;I", "onDismissed", "LADXSnackbarManager_Callback;", "onShown", "pauseTimeout", "restoreTimeoutIfPaused", "isCurrent", "isCurrentOrNext", "cancelSnackbarLocked", "LADXSnackbarManager_SnackbarRecord;I", "isCurrentSnackbarLocked", "isNextSnackbarLocked", "scheduleTimeoutLocked", "LADXSnackbarManager_SnackbarRecord;", "handleTimeout", &ADXSnackbarManager_snackbarManager, "LADXSnackbarManager_Callback;LADXSnackbarManager_SnackbarRecord;" };
  static const J2ObjcClassInfo _ADXSnackbarManager = { "SnackbarManager", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0x0, 16, 8, -1, 19, -1, -1, -1 };
  return &_ADXSnackbarManager;
}

@end

ADXSnackbarManager *ADXSnackbarManager_getInstance() {
  ADXSnackbarManager_initialize();
  if (ADXSnackbarManager_snackbarManager == nil) {
    JreStrongAssignAndConsume(&ADXSnackbarManager_snackbarManager, new_ADXSnackbarManager_initPackagePrivate());
  }
  return ADXSnackbarManager_snackbarManager;
}

void ADXSnackbarManager_initPackagePrivate(ADXSnackbarManager *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->handler_, new_ADHandler_initWithADLooper_withADHandler_Callback_(ADLooper_getMainLooper(), create_ADXSnackbarManager_1_initWithADXSnackbarManager_(self)));
}

ADXSnackbarManager *new_ADXSnackbarManager_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADXSnackbarManager, initPackagePrivate)
}

ADXSnackbarManager *create_ADXSnackbarManager_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADXSnackbarManager, initPackagePrivate)
}

void ADXSnackbarManager_showNextSnackbarLocked(ADXSnackbarManager *self) {
  if (self->nextSnackbar_ != nil) {
    JreStrongAssign(&self->currentSnackbar_, self->nextSnackbar_);
    JreStrongAssign(&self->nextSnackbar_, nil);
    id<ADXSnackbarManager_Callback> callback = [((JavaLangRefWeakReference *) nil_chk(self->currentSnackbar_->callback_)) get];
    if (callback != nil) {
      [callback show];
    }
    else {
      JreStrongAssign(&self->currentSnackbar_, nil);
    }
  }
}

jboolean ADXSnackbarManager_cancelSnackbarLockedWithADXSnackbarManager_SnackbarRecord_withInt_(ADXSnackbarManager *self, ADXSnackbarManager_SnackbarRecord *record, jint event) {
  id<ADXSnackbarManager_Callback> callback = [((JavaLangRefWeakReference *) nil_chk(((ADXSnackbarManager_SnackbarRecord *) nil_chk(record))->callback_)) get];
  if (callback != nil) {
    [((ADHandler *) nil_chk(self->handler_)) removeCallbacksAndMessagesWithId:record];
    [callback dismissWithInt:event];
    return true;
  }
  return false;
}

jboolean ADXSnackbarManager_isCurrentSnackbarLockedWithADXSnackbarManager_Callback_(ADXSnackbarManager *self, id<ADXSnackbarManager_Callback> callback) {
  return self->currentSnackbar_ != nil && [self->currentSnackbar_ isSnackbarWithADXSnackbarManager_Callback:callback];
}

jboolean ADXSnackbarManager_isNextSnackbarLockedWithADXSnackbarManager_Callback_(ADXSnackbarManager *self, id<ADXSnackbarManager_Callback> callback) {
  return self->nextSnackbar_ != nil && [self->nextSnackbar_ isSnackbarWithADXSnackbarManager_Callback:callback];
}

void ADXSnackbarManager_scheduleTimeoutLockedWithADXSnackbarManager_SnackbarRecord_(ADXSnackbarManager *self, ADXSnackbarManager_SnackbarRecord *r) {
  if (((ADXSnackbarManager_SnackbarRecord *) nil_chk(r))->duration_ == ADXBaseTransientBottomBar_LENGTH_INDEFINITE) {
    return;
  }
  jint durationMs = ADXSnackbarManager_LONG_DURATION_MS;
  if (r->duration_ > 0) {
    durationMs = r->duration_;
  }
  else if (r->duration_ == ADXBaseTransientBottomBar_LENGTH_SHORT) {
    durationMs = ADXSnackbarManager_SHORT_DURATION_MS;
  }
  [((ADHandler *) nil_chk(self->handler_)) removeCallbacksAndMessagesWithId:r];
  [self->handler_ sendMessageDelayedWithADMessage:ADMessage_obtainWithADHandler_withInt_withId_(self->handler_, ADXSnackbarManager_MSG_TIMEOUT, r) withLong:durationMs];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSnackbarManager)

@implementation ADXSnackbarManager_1

- (instancetype)initWithADXSnackbarManager:(ADXSnackbarManager *)outer$ {
  ADXSnackbarManager_1_initWithADXSnackbarManager_(self, outer$);
  return self;
}

- (jboolean)handleMessageWithADMessage:(ADMessage *)message {
  switch (((ADMessage *) nil_chk(message))->what_) {
    case ADXSnackbarManager_MSG_TIMEOUT:
    [this$0_ handleTimeoutWithADXSnackbarManager_SnackbarRecord:(ADXSnackbarManager_SnackbarRecord *) cast_chk(message->obj_, [ADXSnackbarManager_SnackbarRecord class])];
    return true;
    default:
    return false;
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXSnackbarManager:);
  methods[1].selector = @selector(handleMessageWithADMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXSnackbarManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXSnackbarManager;", "handleMessage", "LADMessage;", "initPackagePrivate" };
  static const J2ObjcClassInfo _ADXSnackbarManager_1 = { "", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADXSnackbarManager_1;
}

@end

void ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager_1 *self, ADXSnackbarManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXSnackbarManager_1 *new_ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager *outer$) {
  J2OBJC_NEW_IMPL(ADXSnackbarManager_1, initWithADXSnackbarManager_, outer$)
}

ADXSnackbarManager_1 *create_ADXSnackbarManager_1_initWithADXSnackbarManager_(ADXSnackbarManager *outer$) {
  J2OBJC_CREATE_IMPL(ADXSnackbarManager_1, initWithADXSnackbarManager_, outer$)
}

@implementation ADXSnackbarManager_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(show);
  methods[1].selector = @selector(dismissWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "dismiss", "I", "LADXSnackbarManager;" };
  static const J2ObjcClassInfo _ADXSnackbarManager_Callback = { "Callback", "com.google.android.material.snackbar", ptrTable, methods, NULL, 7, 0x608, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXSnackbarManager_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXSnackbarManager_Callback)

@implementation ADXSnackbarManager_SnackbarRecord

- (instancetype)initWithInt:(jint)duration
withADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(self, duration, callback);
  return self;
}

- (jboolean)isSnackbarWithADXSnackbarManager_Callback:(id<ADXSnackbarManager_Callback>)callback {
  return callback != nil && [((JavaLangRefWeakReference *) nil_chk(self->callback_)) get] == callback;
}

- (void)dealloc {
  RELEASE_(callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withADXSnackbarManager_Callback:);
  methods[1].selector = @selector(isSnackbarWithADXSnackbarManager_Callback:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "callback_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "duration_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "paused_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILADXSnackbarManager_Callback;", "isSnackbar", "LADXSnackbarManager_Callback;", "Ljava/lang/ref/WeakReference<Lcom/google/android/material/snackbar/SnackbarManager$Callback;>;", "LADXSnackbarManager;" };
  static const J2ObjcClassInfo _ADXSnackbarManager_SnackbarRecord = { "SnackbarRecord", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0xa, 2, 3, 4, -1, -1, -1, -1 };
  return &_ADXSnackbarManager_SnackbarRecord;
}

@end

void ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(ADXSnackbarManager_SnackbarRecord *self, jint duration, id<ADXSnackbarManager_Callback> callback) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->callback_, new_JavaLangRefWeakReference_initWithId_(callback));
  self->duration_ = duration;
}

ADXSnackbarManager_SnackbarRecord *new_ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(jint duration, id<ADXSnackbarManager_Callback> callback) {
  J2OBJC_NEW_IMPL(ADXSnackbarManager_SnackbarRecord, initWithInt_withADXSnackbarManager_Callback_, duration, callback)
}

ADXSnackbarManager_SnackbarRecord *create_ADXSnackbarManager_SnackbarRecord_initWithInt_withADXSnackbarManager_Callback_(jint duration, id<ADXSnackbarManager_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADXSnackbarManager_SnackbarRecord, initWithInt_withADXSnackbarManager_Callback_, duration, callback)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSnackbarManager_SnackbarRecord)
