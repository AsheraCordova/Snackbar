//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJSnackbar\src\main\java\com\google\android\material\snackbar\Snackbar.java
//

#include "BaseTransientBottomBar.h"
#include "Button.h"
#include "ColorStateList.h"
#include "Context.h"
#include "CoordinatorLayout.h"
#include "Drawable.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "Snackbar.h"
#include "SnackbarContentLayout.h"
#include "SnackbarManager.h"
#include "TextUtils.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ADXSnackbar () {
 @public
  jboolean hasAction_;
}

+ (ADXSnackbar *)makeInternalWithADContext:(ADContext *)context
                                withADView:(ADView *)view
                              withNSString:(NSString *)text
                                   withInt:(jint)duration;

+ (ADViewGroup *)findSuitableParentWithADView:(ADView *)view;

- (ADTextView *)getMessageView;

- (ADButton *)getActionView;

- (ADXSnackbarContentLayout *)getContentLayout;

@end

__attribute__((unused)) static ADXSnackbar *ADXSnackbar_makeInternalWithADContext_withADView_withNSString_withInt_(ADContext *context, ADView *view, NSString *text, jint duration);

__attribute__((unused)) static ADViewGroup *ADXSnackbar_findSuitableParentWithADView_(ADView *view);

__attribute__((unused)) static ADTextView *ADXSnackbar_getMessageView(ADXSnackbar *self);

__attribute__((unused)) static ADButton *ADXSnackbar_getActionView(ADXSnackbar *self);

__attribute__((unused)) static ADXSnackbarContentLayout *ADXSnackbar_getContentLayout(ADXSnackbar *self);

@interface ADXSnackbar_1 : NSObject < ADView_OnClickListener > {
 @public
  ADXSnackbar *this$0_;
  id<ADView_OnClickListener> val$listener_;
}

- (instancetype)initWithADXSnackbar:(ADXSnackbar *)outer$
         withADView_OnClickListener:(id<ADView_OnClickListener>)capture$0;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSnackbar_1)

__attribute__((unused)) static void ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar_1 *self, ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0);

__attribute__((unused)) static ADXSnackbar_1 *new_ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSnackbar_1 *create_ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0);

@implementation ADXSnackbar

+ (ADXSnackbar *)makeWithADContext:(ADContext *)context
                        withADView:(ADView *)view
                      withNSString:(NSString *)text
                           withInt:(jint)duration {
  return ADXSnackbar_makeWithADContext_withADView_withNSString_withInt_(context, view, text, duration);
}

+ (ADXSnackbar *)makeInternalWithADContext:(ADContext *)context
                                withADView:(ADView *)view
                              withNSString:(NSString *)text
                                   withInt:(jint)duration {
  return ADXSnackbar_makeInternalWithADContext_withADView_withNSString_withInt_(context, view, text, duration);
}

+ (ADViewGroup *)findSuitableParentWithADView:(ADView *)view {
  return ADXSnackbar_findSuitableParentWithADView_(view);
}

- (ADXSnackbar *)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)message {
  [((ADTextView *) nil_chk(ADXSnackbar_getMessageView(self))) setTextWithNSString:(NSString *) cast_chk(message, [NSString class])];
  return self;
}

- (ADXSnackbar *)setActionWithNSString:(NSString *)text
            withADView_OnClickListener:(id<ADView_OnClickListener>)listener {
  ADTextView *tv = ADXSnackbar_getActionView(self);
  if (ADTextUtils_isEmptyWithNSString_(text) || listener == nil) {
    [((ADTextView *) nil_chk(tv)) setVisibilityWithInt:ADView_GONE];
    [tv setMyAttributeWithNSString:@"onClick" withId:nil];
    hasAction_ = false;
  }
  else {
    hasAction_ = true;
    [((ADTextView *) nil_chk(tv)) setVisibilityWithInt:ADView_VISIBLE];
    [tv setTextWithNSString:text];
    [tv setMyAttributeWithNSString:@"onClick" withId:create_ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(self, listener)];
  }
  return self;
}

- (ADXSnackbar *)setTextColorWithADColorStateList:(ADColorStateList *)colors {
  [((ADTextView *) nil_chk(ADXSnackbar_getMessageView(self))) setMyAttributeWithNSString:@"textColor" withId:colors];
  return self;
}

- (ADXSnackbar *)setActionTextColorWithADColorStateList:(ADColorStateList *)colors {
  [((ADButton *) nil_chk(ADXSnackbar_getActionView(self))) setMyAttributeWithNSString:@"textColor" withId:colors];
  return self;
}

- (ADXSnackbar *)setMaxInlineActionWidthWithInt:(jint)width {
  [((ADXSnackbarContentLayout *) nil_chk(ADXSnackbar_getContentLayout(self))) setMaxInlineActionWidthWithInt:width];
  return self;
}

- (ADTextView *)getMessageView {
  return ADXSnackbar_getMessageView(self);
}

- (ADButton *)getActionView {
  return ADXSnackbar_getActionView(self);
}

- (ADXSnackbarContentLayout *)getContentLayout {
  return ADXSnackbar_getContentLayout(self);
}

- (instancetype)initWithADContext:(ADContext *)context
                  withADViewGroup:(ADViewGroup *)parent
withADXBaseTransientBottomBar_SnackbarBaseLayout:(ADXBaseTransientBottomBar_SnackbarBaseLayout *)content {
  ADXSnackbar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(self, context, parent, content);
  return self;
}

+ (ADXSnackbar *)makeWithADView:(ADView *)view
                   withNSString:(NSString *)text
                        withInt:(jint)duration {
  return ADXSnackbar_makeWithADView_withNSString_withInt_(view, text, duration);
}

- (void)dismissImmediate {
  [((ADXSnackbarManager *) nil_chk(ADXSnackbarManager_getInstance())) onDismissedWithADXSnackbarManager_Callback:managerCallback_];
}

- (void)setBackgroundWithADDrawable:(ADDrawable *)background {
  [((ADView *) nil_chk([((ADXBaseTransientBottomBar_SnackbarBaseLayout *) nil_chk(self->view_)) getChildAtWithInt:0])) setMyAttributeWithNSString:@"background" withId:background];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXSnackbar;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADTextView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADButton;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSnackbarContentLayout;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, "LADXSnackbar;", 0x9, 0, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(makeWithADContext:withADView:withNSString:withInt:);
  methods[1].selector = @selector(makeInternalWithADContext:withADView:withNSString:withInt:);
  methods[2].selector = @selector(findSuitableParentWithADView:);
  methods[3].selector = @selector(setTextWithJavaLangCharSequence:);
  methods[4].selector = @selector(setActionWithNSString:withADView_OnClickListener:);
  methods[5].selector = @selector(setTextColorWithADColorStateList:);
  methods[6].selector = @selector(setActionTextColorWithADColorStateList:);
  methods[7].selector = @selector(setMaxInlineActionWidthWithInt:);
  methods[8].selector = @selector(getMessageView);
  methods[9].selector = @selector(getActionView);
  methods[10].selector = @selector(getContentLayout);
  methods[11].selector = @selector(initWithADContext:withADViewGroup:withADXBaseTransientBottomBar_SnackbarBaseLayout:);
  methods[12].selector = @selector(makeWithADView:withNSString:withInt:);
  methods[13].selector = @selector(dismissImmediate);
  methods[14].selector = @selector(setBackgroundWithADDrawable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hasAction_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "make", "LADContext;LADView;LNSString;I", "makeInternal", "findSuitableParent", "LADView;", "setText", "LJavaLangCharSequence;", "setAction", "LNSString;LADView_OnClickListener;", "setTextColor", "LADColorStateList;", "setActionTextColor", "setMaxInlineActionWidth", "I", "LADContext;LADViewGroup;LADXBaseTransientBottomBar_SnackbarBaseLayout;", "LADView;LNSString;I", "setBackground", "LADDrawable;", "LADXSnackbar_Callback;LADXSnackbar_SnackbarLayout;", "Lcom/google/android/material/snackbar/BaseTransientBottomBar<Lcom/google/android/material/snackbar/Snackbar;>;" };
  static const J2ObjcClassInfo _ADXSnackbar = { "Snackbar", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0x1, 15, 1, -1, 18, -1, 19, -1 };
  return &_ADXSnackbar;
}

@end

ADXSnackbar *ADXSnackbar_makeWithADContext_withADView_withNSString_withInt_(ADContext *context, ADView *view, NSString *text, jint duration) {
  ADXSnackbar_initialize();
  return ADXSnackbar_makeInternalWithADContext_withADView_withNSString_withInt_(context, view, text, duration);
}

ADXSnackbar *ADXSnackbar_makeInternalWithADContext_withADView_withNSString_withInt_(ADContext *context, ADView *view, NSString *text, jint duration) {
  ADXSnackbar_initialize();
  ADViewGroup *parent = ADXSnackbar_findSuitableParentWithADView_(view);
  if (parent == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"No suitable parent found from the given view. Please provide a valid view.");
  }
  if (context == nil) {
    context = [parent getContext];
  }
  ADXBaseTransientBottomBar_SnackbarBaseLayout *content = (ADXBaseTransientBottomBar_SnackbarBaseLayout *) cast_chk([((ADView *) nil_chk([parent getChildAtWithInt:0])) inflateViewWithNSString:@"@layout/my_design_layout_snackbar"], [ADXBaseTransientBottomBar_SnackbarBaseLayout class]);
  if ([[((ADXBaseTransientBottomBar_SnackbarBaseLayout *) nil_chk(content)) getLayoutParams] isKindOfClass:[ADXCoordinatorLayout_LayoutParams class]]) {
    ((ADXCoordinatorLayout_LayoutParams *) nil_chk(((ADXCoordinatorLayout_LayoutParams *) cast_chk([content getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]))))->gravity_ = ADGravity_BOTTOM;
    ((ADXCoordinatorLayout_LayoutParams *) nil_chk(((ADXCoordinatorLayout_LayoutParams *) cast_chk([content getLayoutParams], [ADXCoordinatorLayout_LayoutParams class]))))->insetEdge_ = ADGravity_BOTTOM;
  }
  ADXSnackbar *snackbar = create_ADXSnackbar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(context, parent, content);
  [snackbar setTextWithJavaLangCharSequence:text];
  [snackbar setDurationWithInt:duration];
  return snackbar;
}

ADViewGroup *ADXSnackbar_findSuitableParentWithADView_(ADView *view) {
  ADXSnackbar_initialize();
  ADViewGroup *fallback = nil;
  do {
    if ([view isKindOfClass:[ADXCoordinatorLayout class]]) {
      return (ADViewGroup *) view;
    }
    else if ([view isKindOfClass:[ADFrameLayout class]]) {
      if ([((ADView *) nil_chk(view)) getId] != -1 && [((NSString *) nil_chk(ASIdGenerator_getNameWithInt_([view getId]))) isEqual:@"@+id/content"]) {
        return (ADViewGroup *) view;
      }
      else {
        fallback = (ADViewGroup *) view;
      }
    }
    if (view != nil) {
      id<ADViewParent> parent = [view getParent];
      view = [parent isKindOfClass:[ADView class]] ? (ADView *) cast_chk(parent, [ADView class]) : nil;
    }
  }
  while (view != nil);
  return fallback;
}

ADTextView *ADXSnackbar_getMessageView(ADXSnackbar *self) {
  return [((ADXSnackbarContentLayout *) nil_chk(ADXSnackbar_getContentLayout(self))) getMessageView];
}

ADButton *ADXSnackbar_getActionView(ADXSnackbar *self) {
  return [((ADXSnackbarContentLayout *) nil_chk(ADXSnackbar_getContentLayout(self))) getActionView];
}

ADXSnackbarContentLayout *ADXSnackbar_getContentLayout(ADXSnackbar *self) {
  return (ADXSnackbarContentLayout *) cast_chk([((ADXBaseTransientBottomBar_SnackbarBaseLayout *) nil_chk(self->view_)) getChildAtWithInt:0], [ADXSnackbarContentLayout class]);
}

void ADXSnackbar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(ADXSnackbar *self, ADContext *context, ADViewGroup *parent, ADXBaseTransientBottomBar_SnackbarBaseLayout *content) {
  ADXBaseTransientBottomBar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(self, context, parent, content);
}

ADXSnackbar *new_ADXSnackbar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(ADContext *context, ADViewGroup *parent, ADXBaseTransientBottomBar_SnackbarBaseLayout *content) {
  J2OBJC_NEW_IMPL(ADXSnackbar, initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_, context, parent, content)
}

ADXSnackbar *create_ADXSnackbar_initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_(ADContext *context, ADViewGroup *parent, ADXBaseTransientBottomBar_SnackbarBaseLayout *content) {
  J2OBJC_CREATE_IMPL(ADXSnackbar, initWithADContext_withADViewGroup_withADXBaseTransientBottomBar_SnackbarBaseLayout_, context, parent, content)
}

ADXSnackbar *ADXSnackbar_makeWithADView_withNSString_withInt_(ADView *view, NSString *text, jint duration) {
  ADXSnackbar_initialize();
  return ADXSnackbar_makeInternalWithADContext_withADView_withNSString_withInt_([((ADView *) nil_chk(view)) getContext], view, text, duration);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSnackbar)

@implementation ADXSnackbar_Callback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSnackbar_Callback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onShownWithId:(ADXSnackbar *)sb {
}

- (void)onDismissedWithId:(ADXSnackbar *)transientBottomBar
                  withInt:(jint)event {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onShownWithId:);
  methods[2].selector = @selector(onDismissedWithId:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DISMISS_EVENT_SWIPE", "I", .constantValue.asInt = ADXSnackbar_Callback_DISMISS_EVENT_SWIPE, 0x19, -1, -1, -1, -1 },
    { "DISMISS_EVENT_ACTION", "I", .constantValue.asInt = ADXSnackbar_Callback_DISMISS_EVENT_ACTION, 0x19, -1, -1, -1, -1 },
    { "DISMISS_EVENT_TIMEOUT", "I", .constantValue.asInt = ADXSnackbar_Callback_DISMISS_EVENT_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "DISMISS_EVENT_MANUAL", "I", .constantValue.asInt = ADXSnackbar_Callback_DISMISS_EVENT_MANUAL, 0x19, -1, -1, -1, -1 },
    { "DISMISS_EVENT_CONSECUTIVE", "I", .constantValue.asInt = ADXSnackbar_Callback_DISMISS_EVENT_CONSECUTIVE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onShown", "LADXSnackbar;", "onDismissed", "LADXSnackbar;I", "Lcom/google/android/material/snackbar/BaseTransientBottomBar$BaseCallback<Lcom/google/android/material/snackbar/Snackbar;>;" };
  static const J2ObjcClassInfo _ADXSnackbar_Callback = { "Callback", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0x9, 3, 5, 1, -1, -1, 4, -1 };
  return &_ADXSnackbar_Callback;
}

@end

void ADXSnackbar_Callback_init(ADXSnackbar_Callback *self) {
  ADXBaseTransientBottomBar_BaseCallback_init(self);
}

ADXSnackbar_Callback *new_ADXSnackbar_Callback_init() {
  J2OBJC_NEW_IMPL(ADXSnackbar_Callback, init)
}

ADXSnackbar_Callback *create_ADXSnackbar_Callback_init() {
  J2OBJC_CREATE_IMPL(ADXSnackbar_Callback, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSnackbar_Callback)

@implementation ADXSnackbar_1

- (instancetype)initWithADXSnackbar:(ADXSnackbar *)outer$
         withADView_OnClickListener:(id<ADView_OnClickListener>)capture$0 {
  ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(self, outer$, capture$0);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  [((id<ADView_OnClickListener>) nil_chk(val$listener_)) onClickWithADView:this$0_->view_];
  [this$0_ dispatchDismissWithInt:ADXBaseTransientBottomBar_BaseCallback_DISMISS_EVENT_ACTION];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXSnackbar:withADView_OnClickListener:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXSnackbar;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listener_", "LADView_OnClickListener;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXSnackbar;LADView_OnClickListener;", "onClick", "LADView;", "LADXSnackbar;", "setActionWithNSString:withADView_OnClickListener:" };
  static const J2ObjcClassInfo _ADXSnackbar_1 = { "", "com.google.android.material.snackbar", ptrTable, methods, fields, 7, 0x8010, 2, 2, 3, -1, 4, -1, -1 };
  return &_ADXSnackbar_1;
}

@end

void ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar_1 *self, ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$listener_, capture$0);
  NSObject_init(self);
}

ADXSnackbar_1 *new_ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0) {
  J2OBJC_NEW_IMPL(ADXSnackbar_1, initWithADXSnackbar_withADView_OnClickListener_, outer$, capture$0)
}

ADXSnackbar_1 *create_ADXSnackbar_1_initWithADXSnackbar_withADView_OnClickListener_(ADXSnackbar *outer$, id<ADView_OnClickListener> capture$0) {
  J2OBJC_CREATE_IMPL(ADXSnackbar_1, initWithADXSnackbar_withADView_OnClickListener_, outer$, capture$0)
}

@implementation ADXSnackbar_SnackbarLayout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSnackbar_SnackbarLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  jint childCount = [self getChildCount];
  jint availableWidth = [self getMeasuredWidth] - [self getPaddingLeft] - [self getPaddingRight];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if (((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk(child)) getLayoutParams]))->width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      [child measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(availableWidth, ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([child getMeasuredHeight], ADView_MeasureSpec_EXACTLY)];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onMeasure", "II", "LADXSnackbar;" };
  static const J2ObjcClassInfo _ADXSnackbar_SnackbarLayout = { "SnackbarLayout", "com.google.android.material.snackbar", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXSnackbar_SnackbarLayout;
}

@end

void ADXSnackbar_SnackbarLayout_init(ADXSnackbar_SnackbarLayout *self) {
  ADXBaseTransientBottomBar_SnackbarBaseLayout_init(self);
}

ADXSnackbar_SnackbarLayout *new_ADXSnackbar_SnackbarLayout_init() {
  J2OBJC_NEW_IMPL(ADXSnackbar_SnackbarLayout, init)
}

ADXSnackbar_SnackbarLayout *create_ADXSnackbar_SnackbarLayout_init() {
  J2OBJC_CREATE_IMPL(ADXSnackbar_SnackbarLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSnackbar_SnackbarLayout)
