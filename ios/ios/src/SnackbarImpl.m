//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSSnackbarPlugin\src\main\java\com\ashera\snackbar\SnackbarImpl.java
//

#include "BaseTransientBottomBar.h"
#include "BaseWidget.h"
#include "ColorStateList.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "Snackbar.h"
#include "SnackbarImpl.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"

@protocol JavaUtilMap;


@interface ASSnackbarImpl () {
 @public
  ADView *viewStub_;
  jint duration_;
  ADXSnackbar *snackbar_;
  NSString *text_;
  NSString *onClickAction_;
  NSString *actionText_;
  ADColorStateList *textColor_;
  jint maxInlineActionWidth_;
  ADColorStateList *actionTextColor_;
  ADDrawable *background_;
}

- (void)showWithId:(id)objValue;

- (void)setTextWithId:(id)objValue;

- (void)setOnClickWithId:(id)objValue;

- (void)setActionTextWithId:(id)objValue;

- (void)setTextColorWithId:(id)objValue;

- (void)setMaxInlineActionWidthWithId:(id)objValue;

- (void)setActionTextColorWithId:(id)objValue;

- (void)setDurationWithId:(id)objValue;

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params;

- (void)addDellocHandler;

- (void)setBackgroundWithId:(id)objValue;

- (void)setBackgroundAttributes;

@end

J2OBJC_FIELD_SETTER(ASSnackbarImpl, viewStub_, ADView *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, snackbar_, ADXSnackbar *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, text_, NSString *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, onClickAction_, NSString *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, actionText_, NSString *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, textColor_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, actionTextColor_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl, background_, ADDrawable *)

inline NSString *ASSnackbarImpl_get_DELLOC_EVENT(void);
static NSString *ASSnackbarImpl_DELLOC_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASSnackbarImpl, DELLOC_EVENT, NSString *)

__attribute__((unused)) static void ASSnackbarImpl_showWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setTextWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setOnClickWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setActionTextWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setTextColorWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setMaxInlineActionWidthWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setActionTextColorWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setDurationWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASSnackbarImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params);

__attribute__((unused)) static void ASSnackbarImpl_addDellocHandler(ASSnackbarImpl *self);

__attribute__((unused)) static void ASSnackbarImpl_setBackgroundWithId_(ASSnackbarImpl *self, id objValue);

__attribute__((unused)) static void ASSnackbarImpl_setBackgroundAttributes(ASSnackbarImpl *self);

@interface ASSnackbarImpl_ViewExt () {
 @public
  ASSnackbarImpl *this$0_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASSnackbarImpl_ViewExt, templates_, id<JavaUtilMap>)

@interface ASSnackbarImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSnackbarImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASSnackbarImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASSnackbarImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASSnackbarImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASSnackbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASSnackbarImpl_OnClickListener *new_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSnackbarImpl_OnClickListener *create_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASSnackbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASSnackbarImpl_OnClickListener *new_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSnackbarImpl_OnClickListener *create_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASSnackbarImpl_OnClickListener)

@interface ASSnackbarImpl_DallocHandler () {
 @public
  __unsafe_unretained ASSnackbarImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASSnackbarImpl)

NSString *ASSnackbarImpl_LOCAL_NAME = @"com.ashera.snackbar.Snackbar";
NSString *ASSnackbarImpl_GROUP_NAME = @"com.ashera.snackbar.Snackbar";

@implementation ASSnackbarImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"duration"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"show"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"actionText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"actionTextColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxInlineActionWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"background"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSnackbarImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIWidget>)newInstance {
  return new_ASSnackbarImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  viewStub_ = new_ASSnackbarImpl_ViewExt_initWithASSnackbarImpl_(self);
  [self createView];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView_, 0, 0, 0, 0);
  ASSnackbarImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"duration", @"text", @"show", @"actionText", @"actionTextColor", @"maxInlineActionWidth", @"textColor", @"onClick", @"background" }, 9)) {
    case 0:
    {
      ASSnackbarImpl_setDurationWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASSnackbarImpl_setTextWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASSnackbarImpl_showWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASSnackbarImpl_setActionTextWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASSnackbarImpl_setActionTextColorWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASSnackbarImpl_setMaxInlineActionWidthWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASSnackbarImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASSnackbarImpl_setOnClickWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASSnackbarImpl_setBackgroundWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)asWidget {
  return viewStub_;
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (void)showWithId:(id)objValue {
  ASSnackbarImpl_showWithId_(self, objValue);
}

- (void)setTextWithId:(id)objValue {
  ASSnackbarImpl_setTextWithId_(self, objValue);
}

- (void)setOnClickWithId:(id)objValue {
  ASSnackbarImpl_setOnClickWithId_(self, objValue);
}

- (void)setActionTextWithId:(id)objValue {
  ASSnackbarImpl_setActionTextWithId_(self, objValue);
}

- (void)setTextColorWithId:(id)objValue {
  ASSnackbarImpl_setTextColorWithId_(self, objValue);
}

- (void)setMaxInlineActionWidthWithId:(id)objValue {
  ASSnackbarImpl_setMaxInlineActionWidthWithId_(self, objValue);
}

- (void)setActionTextColorWithId:(id)objValue {
  ASSnackbarImpl_setActionTextColorWithId_(self, objValue);
}

- (void)setDurationWithId:(id)objValue {
  ASSnackbarImpl_setDurationWithId_(self, objValue);
}

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params {
  ASSnackbarImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)addDellocHandler {
  ASSnackbarImpl_addDellocHandler(self);
}

- (void)setBackgroundWithId:(id)objValue {
  ASSnackbarImpl_setBackgroundWithId_(self, objValue);
}

- (void)setBackgroundAttributes {
  ASSnackbarImpl_setBackgroundAttributes(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (IOSClass *)getViewClass {
  return ADView_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(newInstance);
  methods[3].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[4].selector = @selector(createView);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(asWidget);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(showWithId:);
  methods[9].selector = @selector(setTextWithId:);
  methods[10].selector = @selector(setOnClickWithId:);
  methods[11].selector = @selector(setActionTextWithId:);
  methods[12].selector = @selector(setTextColorWithId:);
  methods[13].selector = @selector(setMaxInlineActionWidthWithId:);
  methods[14].selector = @selector(setActionTextColorWithId:);
  methods[15].selector = @selector(setDurationWithId:);
  methods[16].selector = @selector(nativeCreateWithASIFragment:withJavaUtilMap:);
  methods[17].selector = @selector(addDellocHandler);
  methods[18].selector = @selector(setBackgroundWithId:);
  methods[19].selector = @selector(setBackgroundAttributes);
  methods[20].selector = @selector(asNativeWidget);
  methods[21].selector = @selector(getViewClass);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "viewStub_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "duration_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "snackbar_", "LADXSnackbar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onClickAction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxInlineActionWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionTextColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DELLOC_EVENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "background_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "show", "LNSObject;", "setText", "setOnClick", "setActionText", "setTextColor", "setMaxInlineActionWidth", "setActionTextColor", "setDuration", "nativeCreate", "setBackground", &ASSnackbarImpl_LOCAL_NAME, &ASSnackbarImpl_GROUP_NAME, &ASSnackbarImpl_DELLOC_EVENT, "LASSnackbarImpl_ViewExt;LASSnackbarImpl_OnClickListener;LASSnackbarImpl_DallocHandler;" };
  static const J2ObjcClassInfo _ASSnackbarImpl = { "SnackbarImpl", "com.ashera.snackbar", ptrTable, methods, fields, 7, 0x1, 22, 14, -1, 23, -1, -1, -1 };
  return &_ASSnackbarImpl;
}

+ (void)initialize {
  if (self == [ASSnackbarImpl class]) {
    ASSnackbarImpl_DELLOC_EVENT = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    J2OBJC_SET_INITIALIZED(ASSnackbarImpl)
  }
}

@end

void ASSnackbarImpl_init(ASSnackbarImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASSnackbarImpl_LOCAL_NAME, ASSnackbarImpl_LOCAL_NAME);
  self->duration_ = ADXBaseTransientBottomBar_LENGTH_INDEFINITE;
}

ASSnackbarImpl *new_ASSnackbarImpl_init() {
  J2OBJC_NEW_IMPL(ASSnackbarImpl, init)
}

ASSnackbarImpl *create_ASSnackbarImpl_init() {
  J2OBJC_CREATE_IMPL(ASSnackbarImpl, init)
}

void ASSnackbarImpl_showWithId_(ASSnackbarImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    if (self->snackbar_ != nil) {
      [self->snackbar_ dismiss];
      self->snackbar_ = nil;
    }
    self->snackbar_ = ADXSnackbar_makeWithADView_withNSString_withInt_(self->viewStub_, self->text_, self->duration_);
    if (self->actionText_ != nil) {
      if (self->onClickAction_ == nil) {
        self->onClickAction_ = @"";
      }
      (void) [((ADXSnackbar *) nil_chk(self->snackbar_)) setActionWithNSString:self->actionText_ withADView_OnClickListener:new_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, self->onClickAction_)];
    }
    if (self->actionTextColor_ != nil) {
      (void) [((ADXSnackbar *) nil_chk(self->snackbar_)) setActionTextColorWithADColorStateList:self->actionTextColor_];
    }
    if (self->textColor_ != nil) {
      (void) [((ADXSnackbar *) nil_chk(self->snackbar_)) setTextColorWithADColorStateList:self->textColor_];
    }
    if (self->maxInlineActionWidth_ != 0) {
      (void) [((ADXSnackbar *) nil_chk(self->snackbar_)) setMaxInlineActionWidthWithInt:self->maxInlineActionWidth_];
    }
    ASSnackbarImpl_setBackgroundAttributes(self);
    [((ADXSnackbar *) nil_chk(self->snackbar_)) dismiss];
    [((ADXSnackbar *) nil_chk(self->snackbar_)) show];
  }
  else {
    if (self->snackbar_ != nil) {
      [self->snackbar_ dismiss];
      self->snackbar_ = nil;
    }
  }
}

void ASSnackbarImpl_setTextWithId_(ASSnackbarImpl *self, id objValue) {
  self->text_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASSnackbarImpl_setOnClickWithId_(ASSnackbarImpl *self, id objValue) {
  self->onClickAction_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASSnackbarImpl_setActionTextWithId_(ASSnackbarImpl *self, id objValue) {
  self->actionText_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASSnackbarImpl_setTextColorWithId_(ASSnackbarImpl *self, id objValue) {
  self->textColor_ = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
}

void ASSnackbarImpl_setMaxInlineActionWidthWithId_(ASSnackbarImpl *self, id objValue) {
  self->maxInlineActionWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASSnackbarImpl_setActionTextColorWithId_(ASSnackbarImpl *self, id objValue) {
  self->actionTextColor_ = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
}

void ASSnackbarImpl_setDurationWithId_(ASSnackbarImpl *self, id objValue) {
  self->duration_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASSnackbarImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASSnackbarImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params) {
  ASSnackbarImpl_addDellocHandler(self);
}

void ASSnackbarImpl_addDellocHandler(ASSnackbarImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:ASSnackbarImpl_DELLOC_EVENT withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASSnackbarImpl_DallocHandler_initWithASSnackbarImpl_withNSString_(self, ASSnackbarImpl_DELLOC_EVENT) } count:1 type:ASEventBusHandler_class_()]];
}

void ASSnackbarImpl_setBackgroundWithId_(ASSnackbarImpl *self, id objValue) {
  self->background_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

void ASSnackbarImpl_setBackgroundAttributes(ASSnackbarImpl *self) {
  if (self->background_ != nil) {
    [((ADXSnackbar *) nil_chk(self->snackbar_)) setBackgroundWithADDrawable:self->background_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSnackbarImpl)

@implementation ASSnackbarImpl_ViewExt

- (instancetype)initWithASSnackbarImpl:(ASSnackbarImpl *)outer$ {
  ASSnackbarImpl_ViewExt_initWithASSnackbarImpl_(self, outer$);
  return self;
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASSnackbarImpl:);
  methods[1].selector = @selector(remeasure);
  methods[2].selector = @selector(inflateViewWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASSnackbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LASSnackbarImpl;", "inflateView", "LNSString;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASSnackbarImpl_ViewExt = { "ViewExt", "com.ashera.snackbar", ptrTable, methods, fields, 7, 0x1, 3, 2, 0, -1, -1, -1, -1 };
  return &_ASSnackbarImpl_ViewExt;
}

@end

void ASSnackbarImpl_ViewExt_initWithASSnackbarImpl_(ASSnackbarImpl_ViewExt *self, ASSnackbarImpl *outer$) {
  self->this$0_ = outer$;
  ADView_init(self);
}

ASSnackbarImpl_ViewExt *new_ASSnackbarImpl_ViewExt_initWithASSnackbarImpl_(ASSnackbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASSnackbarImpl_ViewExt, initWithASSnackbarImpl_, outer$)
}

ASSnackbarImpl_ViewExt *create_ASSnackbarImpl_ViewExt_initWithASSnackbarImpl_(ASSnackbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASSnackbarImpl_ViewExt, initWithASSnackbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSnackbarImpl_ViewExt)

@implementation ASSnackbarImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASSnackbarImpl;" };
  static const J2ObjcClassInfo _ASSnackbarImpl_OnClickListener = { "OnClickListener", "com.ashera.snackbar", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASSnackbarImpl_OnClickListener;
}

@end

void ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASSnackbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASSnackbarImpl_OnClickListener *new_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASSnackbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASSnackbarImpl_OnClickListener *create_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASSnackbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASSnackbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASSnackbarImpl_OnClickListener *new_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASSnackbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASSnackbarImpl_OnClickListener *create_ASSnackbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASSnackbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSnackbarImpl_OnClickListener)

@implementation ASSnackbarImpl_DallocHandler

- (instancetype)initWithASSnackbarImpl:(ASSnackbarImpl *)outer$
                          withNSString:(NSString *)type {
  ASSnackbarImpl_DallocHandler_initWithASSnackbarImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (this$0_->snackbar_ != nil) {
    [this$0_->snackbar_ dismissImmediate];
    this$0_->snackbar_ = nil;
  }
}

- (void)__javaClone:(ASSnackbarImpl_DallocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASSnackbarImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASSnackbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASSnackbarImpl;LNSString;", "doPerform", "LNSObject;", "LASSnackbarImpl;" };
  static const J2ObjcClassInfo _ASSnackbarImpl_DallocHandler = { "DallocHandler", "com.ashera.snackbar", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASSnackbarImpl_DallocHandler;
}

@end

void ASSnackbarImpl_DallocHandler_initWithASSnackbarImpl_withNSString_(ASSnackbarImpl_DallocHandler *self, ASSnackbarImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASSnackbarImpl_DallocHandler *new_ASSnackbarImpl_DallocHandler_initWithASSnackbarImpl_withNSString_(ASSnackbarImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASSnackbarImpl_DallocHandler, initWithASSnackbarImpl_withNSString_, outer$, type)
}

ASSnackbarImpl_DallocHandler *create_ASSnackbarImpl_DallocHandler_initWithASSnackbarImpl_withNSString_(ASSnackbarImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASSnackbarImpl_DallocHandler, initWithASSnackbarImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSnackbarImpl_DallocHandler)
